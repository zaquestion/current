// Code generated by truss.
// Rerunning truss will overwrite this file.
// DO NOT EDIT!
// Version: a41ee29fb6
// Version Date: Fri May 26 18:19:22 UTC 2017

// Package grpc provides a gRPC client for the Current service.
package grpc

import (
	"github.com/pkg/errors"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/zaquestion/current/current-service"
	"github.com/zaquestion/current/current-service/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.CurrentServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var postlocationbigbrotherEndpoint endpoint.Endpoint
	{
		postlocationbigbrotherEndpoint = grpctransport.NewClient(
			conn,
			"current.Current",
			"PostLocationBigBrother",
			EncodeGRPCPostLocationBigBrotherRequest,
			DecodeGRPCPostLocationBigBrotherResponse,
			pb.Error{},
			clientOptions...,
		).Endpoint()
	}

	var postlocationtaskerEndpoint endpoint.Endpoint
	{
		postlocationtaskerEndpoint = grpctransport.NewClient(
			conn,
			"current.Current",
			"PostLocationTasker",
			EncodeGRPCPostLocationTaskerRequest,
			DecodeGRPCPostLocationTaskerResponse,
			pb.Error{},
			clientOptions...,
		).Endpoint()
	}

	var getlocationEndpoint endpoint.Endpoint
	{
		getlocationEndpoint = grpctransport.NewClient(
			conn,
			"current.Current",
			"GetLocation",
			EncodeGRPCGetLocationRequest,
			DecodeGRPCGetLocationResponse,
			pb.Location{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		PostLocationBigBrotherEndpoint: postlocationbigbrotherEndpoint,
		PostLocationTaskerEndpoint:     postlocationtaskerEndpoint,
		GetLocationEndpoint:            getlocationEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCPostLocationBigBrotherResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC postlocationbigbrother reply to a user-domain postlocationbigbrother response. Primarily useful in a client.
func DecodeGRPCPostLocationBigBrotherResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Error)
	return reply, nil
}

// DecodeGRPCPostLocationTaskerResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC postlocationtasker reply to a user-domain postlocationtasker response. Primarily useful in a client.
func DecodeGRPCPostLocationTaskerResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Error)
	return reply, nil
}

// DecodeGRPCGetLocationResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getlocation reply to a user-domain getlocation response. Primarily useful in a client.
func DecodeGRPCGetLocationResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Location)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCPostLocationBigBrotherRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain postlocationbigbrother request to a gRPC postlocationbigbrother request. Primarily useful in a client.
func EncodeGRPCPostLocationBigBrotherRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.PostLocationBigBrotherRequest)
	return req, nil
}

// EncodeGRPCPostLocationTaskerRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain postlocationtasker request to a gRPC postlocationtasker request. Primarily useful in a client.
func EncodeGRPCPostLocationTaskerRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.PostLocationTaskerRequest)
	return req, nil
}

// EncodeGRPCGetLocationRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getlocation request to a gRPC getlocation request. Primarily useful in a client.
func EncodeGRPCGetLocationRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetLocationRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.RequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}

// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: d5b3153b9f
// Version Date: Thu Jul 27 18:20:46 UTC 2017

package svc

// This file provides server-side bindings for the HTTP transport.
// It utilizes the transport/http.Server.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"golang.org/x/net/context"

	"github.com/go-kit/kit/log"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
	"github.com/pkg/errors"

	// This service
	pb "github.com/zaquestion/current/current-service"
)

const contentType = "application/json; charset=utf-8"

var (
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = strconv.Atoi
	_ = httptransport.NewServer
	_ = ioutil.NopCloser
	_ = pb.RegisterCurrentServer
	_ = io.Copy
	_ = errors.Wrap
)

// MakeHTTPHandler returns a handler that makes a set of endpoints available
// on predefined paths.
func MakeHTTPHandler(ctx context.Context, endpoints Endpoints, logger log.Logger) http.Handler {
	serverOptions := []httptransport.ServerOption{
		httptransport.ServerBefore(headersToContext),
		httptransport.ServerErrorEncoder(errorEncoder),
		httptransport.ServerAfter(httptransport.SetContentType(contentType)),
	}
	m := mux.NewRouter()

	m.Methods("POST").Path("/location/bigbrother").Handler(httptransport.NewServer(
		ctx,
		endpoints.PostLocationBigBrotherEndpoint,
		DecodeHTTPPostLocationBigBrotherZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("POST").Path("/location/tasker").Handler(httptransport.NewServer(
		ctx,
		endpoints.PostLocationTaskerEndpoint,
		DecodeHTTPPostLocationTaskerZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))

	m.Methods("GET").Path("/location").Handler(httptransport.NewServer(
		ctx,
		endpoints.GetLocationEndpoint,
		DecodeHTTPGetLocationZeroRequest,
		EncodeHTTPGenericResponse,
		serverOptions...,
	))
	return m
}

// ErrorEncoder writes the error to the ResponseWriter, by default a content
// type of application/json, a body of json with key "error" and the value
// error.Error(), and a status code of 500. If the error implements Headerer,
// the provided headers will be applied to the response. If the error
// implements json.Marshaler, and the marshaling succeeds, the JSON encoded
// form of the error will be used. If the error implements StatusCoder, the
// provided StatusCode will be used instead of 500.
func errorEncoder(_ context.Context, err error, w http.ResponseWriter) {
	body, _ := json.Marshal(errorWrapper{Error: err.Error()})
	if marshaler, ok := err.(json.Marshaler); ok {
		if jsonBody, marshalErr := marshaler.MarshalJSON(); marshalErr == nil {
			body = jsonBody
		}
	}
	w.Header().Set("Content-Type", contentType)
	if headerer, ok := err.(httptransport.Headerer); ok {
		for k := range headerer.Headers() {
			w.Header().Set(k, headerer.Headers().Get(k))
		}
	}
	code := http.StatusInternalServerError
	if sc, ok := err.(httptransport.StatusCoder); ok {
		code = sc.StatusCode()
	}
	w.WriteHeader(code)
	w.Write(body)
}

type errorWrapper struct {
	Error string `json:"error"`
}

// httpError satisfies the Headerer and StatusCoder interfaces in
// package github.com/go-kit/kit/transport/http.
type httpError struct {
	error
	statusCode int
	headers    map[string][]string
}

func (h httpError) StatusCode() int {
	return h.statusCode
}

func (h httpError) Headers() http.Header {
	return h.headers
}

// Server Decode

// DecodeHTTPPostLocationBigBrotherZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded postlocationbigbrother request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPPostLocationBigBrotherZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req pb.PostLocationBigBrotherRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		if err = json.Unmarshal(buf, &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{fmt.Errorf("request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if LatitudePostLocationBigBrotherStrArr, ok := queryParams["latitude"]; ok {
		LatitudePostLocationBigBrotherStr := LatitudePostLocationBigBrotherStrArr[0]
		LatitudePostLocationBigBrother, err := strconv.ParseFloat(LatitudePostLocationBigBrotherStr, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting LatitudePostLocationBigBrother from query, queryParams: %v", queryParams))
		}
		req.Latitude = LatitudePostLocationBigBrother
	}

	if LongitudePostLocationBigBrotherStrArr, ok := queryParams["longitude"]; ok {
		LongitudePostLocationBigBrotherStr := LongitudePostLocationBigBrotherStrArr[0]
		LongitudePostLocationBigBrother, err := strconv.ParseFloat(LongitudePostLocationBigBrotherStr, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting LongitudePostLocationBigBrother from query, queryParams: %v", queryParams))
		}
		req.Longitude = LongitudePostLocationBigBrother
	}

	if AccuracyPostLocationBigBrotherStrArr, ok := queryParams["accuracy"]; ok {
		AccuracyPostLocationBigBrotherStr := AccuracyPostLocationBigBrotherStrArr[0]
		AccuracyPostLocationBigBrother, err := strconv.ParseFloat(AccuracyPostLocationBigBrotherStr, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting AccuracyPostLocationBigBrother from query, queryParams: %v", queryParams))
		}
		req.Accuracy = AccuracyPostLocationBigBrother
	}

	if AltitudePostLocationBigBrotherStrArr, ok := queryParams["altitude"]; ok {
		AltitudePostLocationBigBrotherStr := AltitudePostLocationBigBrotherStrArr[0]
		AltitudePostLocationBigBrother, err := strconv.ParseFloat(AltitudePostLocationBigBrotherStr, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting AltitudePostLocationBigBrother from query, queryParams: %v", queryParams))
		}
		req.Altitude = AltitudePostLocationBigBrother
	}

	if BearingPostLocationBigBrotherStrArr, ok := queryParams["bearing"]; ok {
		BearingPostLocationBigBrotherStr := BearingPostLocationBigBrotherStrArr[0]
		BearingPostLocationBigBrother, err := strconv.ParseFloat(BearingPostLocationBigBrotherStr, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting BearingPostLocationBigBrother from query, queryParams: %v", queryParams))
		}
		req.Bearing = BearingPostLocationBigBrother
	}

	if SpeedPostLocationBigBrotherStrArr, ok := queryParams["speed"]; ok {
		SpeedPostLocationBigBrotherStr := SpeedPostLocationBigBrotherStrArr[0]
		SpeedPostLocationBigBrother, err := strconv.ParseFloat(SpeedPostLocationBigBrotherStr, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting SpeedPostLocationBigBrother from query, queryParams: %v", queryParams))
		}
		req.Speed = SpeedPostLocationBigBrother
	}

	if BattlevelPostLocationBigBrotherStrArr, ok := queryParams["battlevel"]; ok {
		BattlevelPostLocationBigBrotherStr := BattlevelPostLocationBigBrotherStrArr[0]
		BattlevelPostLocationBigBrother, err := strconv.ParseInt(BattlevelPostLocationBigBrotherStr, 10, 32)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting BattlevelPostLocationBigBrother from query, queryParams: %v", queryParams))
		}
		req.Battlevel = int32(BattlevelPostLocationBigBrother)
	}

	if TimePostLocationBigBrotherStrArr, ok := queryParams["time"]; ok {
		TimePostLocationBigBrotherStr := TimePostLocationBigBrotherStrArr[0]
		TimePostLocationBigBrother := TimePostLocationBigBrotherStr
		req.Time = TimePostLocationBigBrother
	}

	return &req, err
}

// DecodeHTTPPostLocationTaskerZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded postlocationtasker request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPPostLocationTaskerZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req pb.PostLocationTaskerRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		if err = json.Unmarshal(buf, &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{fmt.Errorf("request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPGetLocationZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getlocation request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetLocationZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var req pb.GetLocationRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		if err = json.Unmarshal(buf, &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{fmt.Errorf("request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := mux.Vars(r)
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if SecretGetLocationStrArr, ok := queryParams["secret"]; ok {
		SecretGetLocationStr := SecretGetLocationStrArr[0]
		SecretGetLocation := SecretGetLocationStr
		req.Secret = SecretGetLocation
	}

	return &req, err
}

// EncodeHTTPGenericResponse is a transport/http.EncodeResponseFunc that encodes
// the response as JSON to the response writer. Primarily useful in a server.
func EncodeHTTPGenericResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	encoder := json.NewEncoder(w)
	encoder.SetEscapeHTML(false)
	return encoder.Encode(response)
}

// Helper functions

func headersToContext(ctx context.Context, r *http.Request) context.Context {
	for k, _ := range r.Header {
		// The key is added both in http format (k) which has had
		// http.CanonicalHeaderKey called on it in transport as well as the
		// strings.ToLower which is the grpc metadata format of the key so
		// that it can be accessed in either format
		ctx = context.WithValue(ctx, k, r.Header.Get(k))
		ctx = context.WithValue(ctx, strings.ToLower(k), r.Header.Get(k))
	}

	return ctx
}

func HTTPDecodeLogger(next httptransport.DecodeRequestFunc, logger log.Logger) httptransport.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		logger.Log("method", r.Method, "url", r.URL.String())
		rv, err := next(ctx, r)
		if err != nil {
			logger.Log("method", r.Method, "url", r.URL.String(), "err", err)
		}
		return rv, err
	}
}

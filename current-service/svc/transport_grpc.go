// Code generated by truss.
// Rerunning truss will overwrite this file.
// DO NOT EDIT!
// Version: a41ee29fb6
// Version Date: Fri May 26 18:19:22 UTC 2017

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"net/http"

	"golang.org/x/net/context"
	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/zaquestion/current/current-service"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC CurrentServer.
func MakeGRPCServer(ctx context.Context, endpoints Endpoints) pb.CurrentServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	return &grpcServer{
		// current

		postlocationbigbrother: grpctransport.NewServer(
			ctx,
			endpoints.PostLocationBigBrotherEndpoint,
			DecodeGRPCPostLocationBigBrotherRequest,
			EncodeGRPCPostLocationBigBrotherResponse,
			serverOptions...,
		),
		postlocationtasker: grpctransport.NewServer(
			ctx,
			endpoints.PostLocationTaskerEndpoint,
			DecodeGRPCPostLocationTaskerRequest,
			EncodeGRPCPostLocationTaskerResponse,
			serverOptions...,
		),
		getlocation: grpctransport.NewServer(
			ctx,
			endpoints.GetLocationEndpoint,
			DecodeGRPCGetLocationRequest,
			EncodeGRPCGetLocationResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the CurrentServer interface
type grpcServer struct {
	postlocationbigbrother grpctransport.Handler
	postlocationtasker     grpctransport.Handler
	getlocation            grpctransport.Handler
}

// Methods for grpcServer to implement CurrentServer interface

func (s *grpcServer) PostLocationBigBrother(ctx context.Context, req *pb.PostLocationBigBrotherRequest) (*pb.Error, error) {
	_, rep, err := s.postlocationbigbrother.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Error), nil
}

func (s *grpcServer) PostLocationTasker(ctx context.Context, req *pb.PostLocationTaskerRequest) (*pb.Error, error) {
	_, rep, err := s.postlocationtasker.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Error), nil
}

func (s *grpcServer) GetLocation(ctx context.Context, req *pb.GetLocationRequest) (*pb.Location, error) {
	_, rep, err := s.getlocation.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Location), nil
}

// Server Decode

// DecodeGRPCPostLocationBigBrotherRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC postlocationbigbrother request to a user-domain postlocationbigbrother request. Primarily useful in a server.
func DecodeGRPCPostLocationBigBrotherRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.PostLocationBigBrotherRequest)
	return req, nil
}

// DecodeGRPCPostLocationTaskerRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC postlocationtasker request to a user-domain postlocationtasker request. Primarily useful in a server.
func DecodeGRPCPostLocationTaskerRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.PostLocationTaskerRequest)
	return req, nil
}

// DecodeGRPCGetLocationRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getlocation request to a user-domain getlocation request. Primarily useful in a server.
func DecodeGRPCGetLocationRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetLocationRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCPostLocationBigBrotherResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain postlocationbigbrother response to a gRPC postlocationbigbrother reply. Primarily useful in a server.
func EncodeGRPCPostLocationBigBrotherResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Error)
	return resp, nil
}

// EncodeGRPCPostLocationTaskerResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain postlocationtasker response to a gRPC postlocationtasker reply. Primarily useful in a server.
func EncodeGRPCPostLocationTaskerResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Error)
	return resp, nil
}

// EncodeGRPCGetLocationResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getlocation response to a gRPC getlocation reply. Primarily useful in a server.
func EncodeGRPCGetLocationResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Location)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md *metadata.MD) context.Context {
	for k, v := range *md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
